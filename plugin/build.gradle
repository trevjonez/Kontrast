/*
 *    Copyright 2017 Trevor Jones
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

apply plugin: 'nebula.kotlin'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven'
apply plugin: 'de.undercouch.download'
apply plugin: 'AVD'

group = rootProject.group
version = rootProject.version
sourceCompatibility = 1.8

gradlePlugin {
    plugins {
        kontrast {
            id = "kontrast"
            implementationClass = "com.trevjonez.kontrast.KontrastPlugin"
        }
    }
}

dependencies {
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-html-jvm', version: kotlinx_html_version
    compile group: 'com.android.tools.build', name: 'gradle', version: android_plugin_version
    compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.1.5'
    compile group: 'azadev.kotlin', name: 'aza-kotlin-css', version: '1.0'
    compile project(':jvmCommon')
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
    testCompile group: 'commons-io', name: 'commons-io', version: '2.5'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
}

configurations {
    reportResources
}

import de.undercouch.gradle.tasks.download.Download

def mdcVersion = '0.27.0'

task downloadMdcCss(type: Download) {
    src "https://unpkg.com/material-components-web@$mdcVersion/dist/material-components-web.min.css"
    dest file("$buildDir/material-components-web.min.css")
    group = "Download Resources"
    description = "Downloads MDC css file"
    onlyIfModified true
}

task downloadMdcJs(type: Download) {
    src "https://unpkg.com/material-components-web@$mdcVersion/dist/material-components-web.min.js"
    dest file("$buildDir/material-components-web.min.js")
    group = "Download Resources"
    description = "Downloads MDC js file"
    onlyIfModified true
}

processResources {
    dependsOn(':reportJs:runDceKotlinJs')
    from file("${rootProject.project(":reportJs").buildDir.path}/classes/kotlin/main/min/kotlin.js")
    from file("${rootProject.project(":reportJs").buildDir.path}/classes/kotlin/main/min/reportJs.js")
    from file("${rootProject.project(":reportJs").buildDir.path}/classes/kotlin/main/min/kotlinx-html-js.js")
    from downloadMdcCss
    from downloadMdcJs
}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    systemProperty("KontrastVersion", version)
    environment("ANDROID_HOME", androidHome())
    outputs.upToDateWhen { false }
}

tasks.findByPath('test').dependsOn(':plugin:install')
tasks.findByPath('test').dependsOn(':unitTestClient:install')
tasks.findByPath('test').dependsOn(':androidTestClient:install')
tasks.findByPath('test').dependsOn(':appClient:install')
tasks.findByPath('test').dependsOn(':jvmCommon:install')
if (!project.hasProperty("NoEmulator")) {
    tasks.findByPath('test').dependsOn(':plugin:startAvd_Nexus_5X_API_O')
    tasks.findByPath('test').finalizedBy(':plugin:stopAvd_Nexus_5X_API_O')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom.artifactId = 'plugin'
        pom.project {
            inceptionYear '2017'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }
}

AVD {
    acceptAndroidSdkLicense true
    acceptAndroidSdkPreviewLicense true

    configs {
        'Nexus 5X API O' {
            avd {
                abi 'x86'
                api 26
                type 'google_apis'
                deviceId 'Nexus 5X'
            }
            launchOption("-wipe-data")
        }
    }
}

String androidHome() {
    String envVar = System.getenv("ANDROID_HOME")
    if (envVar != null) return envVar

    Properties localProperties = new Properties()
    File localPropFile = new File(project.rootProject.projectDir, "local.properties")
    if (localPropFile.exists()) {
        localProperties.load(new FileInputStream(localPropFile))
    } else throw IllegalStateException("Can't find android sdk via ANDROID_HOME and local.properties does not exist in root project")


    String sdkDir = localProperties.getProperty("sdk.dir")
    if (sdkDir != null) return sdkDir

    throw IllegalStateException("Can't find android sdk as ANDROID_HOME env var or as sdk.dir in rootProject local.properties")
}